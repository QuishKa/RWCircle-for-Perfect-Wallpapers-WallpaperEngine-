// Path: \Steam\steamapps\workshop\content\431960\884307090\js\PWCircle.js
// ??????????

//set window.requestAnimationFrame
/*
(function (w, r) {
    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };
})(window, 'equestAnimationFrame');
*/
// ??????????

//set window.requestAnimationFrame
/*
(function (w, r) {
    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };
})(window, 'equestAnimationFrame');
*/

var started = false;
var isBelowZero = false;
var myheight = [];
var bars = [];
var barsLength = 64;
var peakValue = 1;
var smoothingFactor = 2;
var timeSinceLastPing = Date.now();
var lastCalled = Date.now();
var user = {
    barWidth: 20,
    barPadding: 5,
    peak: 1,
    titleOrder: true,
    updateRate: 5,
};
var pinknoise = [1.1760367470305, 0.85207379418243, 0.68842437227852, 0.63767902570829, 0.5452348949654, 0.50723325864167, 0.4677726234682, 0.44204182748767,
    0.41956517802157, 0.41517375040002, 0.41312118577934, 0.40618363960446, 0.39913707474975, 0.38207008614508, 0.38329789106488, 0.37472136606245,
    0.36586428412968, 0.37603017335105, 0.39762590761573, 0.39391828858591, 0.37930603769622, 0.39433365764563, 0.38511504613859, 0.39082579241834,
    0.3811852720504, 0.40231453727161, 0.40244151133175, 0.39965366884521, 0.39761103827545, 0.51136400422212, 0.66151212038954, 0.66312205226679,
    0.7416276690995, 0.74614971301133, 0.84797007577483, 0.8573583910469, 0.96382997811663, 0.99819377577185, 1.0628692615814, 1.1059083969751,
    1.1819808497335, 1.257092297208, 1.3226521464753, 1.3735992532905, 1.4953223705889, 1.5310064942373, 1.6193923584808, 1.7094805527135,
    1.7706604552218, 1.8491987941428, 1.9238418849406, 2.0141596921333, 2.0786429508827, 2.1575522518646, 2.2196355526005, 2.2660112509705,
    2.320762171749, 2.3574848254513, 2.3986127976537, 2.4043566176474, 2.4280476777842, 2.3917477397336, 2.4032522546622, 2.3614180150678,
    1.1760367470305, 0.85207379418243, 0.68842437227852, 0.63767902570829, 0.5452348949654, 0.50723325864167, 0.4677726234682, 0.44204182748767,
    0.41956517802157, 0.41517375040002, 0.41312118577934, 0.40618363960446, 0.39913707474975, 0.38207008614508, 0.38329789106488, 0.37472136606245,
    0.36586428412968, 0.37603017335105, 0.39762590761573, 0.39391828858591, 0.37930603769622, 0.39433365764563, 0.38511504613859, 0.39082579241834,
    0.3811852720504, 0.40231453727161, 0.40244151133175, 0.39965366884521, 0.39761103827545, 0.51136400422212, 0.66151212038954, 0.66312205226679,
    0.7416276690995, 0.74614971301133, 0.84797007577483, 0.8573583910469, 0.96382997811663, 0.99819377577185, 1.0628692615814, 1.1059083969751,
    1.1819808497335, 1.257092297208, 1.3226521464753, 1.3735992532905, 1.4953223705889, 1.5310064942373, 1.6193923584808, 1.7094805527135,
    1.7706604552218, 1.8491987941428, 1.9238418849406, 2.0141596921333, 2.0786429508827, 2.1575522518646, 2.2196355526005, 2.2660112509705,
    2.320762171749, 2.3574848254513, 2.3986127976537, 2.4043566176474, 2.4280476777842, 2.3917477397336, 2.4032522546622, 2.3614180150678];

var last = performance.now() / 1000;
var fpsThreshold = 0;

var w, h, minW;
var can = document.querySelector("#can");
var ctx = can.getContext("2d");
var	circleX;
var	circleY;
var roh = 0;
var rainRad;
//var CanPar = document.getElementById("#CanPar");
//var CXTPar = CanPar.getContext("2d");
//var hue = 0;

function resize(){
    can.width = w = window.innerWidth;
    can.height = h = window.innerHeight;
    minW = Math.min(w, h);
	ctx.lineWidth = param.lineWidth;
	ctx.shadowBlur = param.shadowBlur;
	rainRad = Math.sqrt((Math.pow((h), 2) + Math.pow((w), 2)));
    //setCan();
}


function setCan() {
	switch (param.ColorMode){
		case 1:
			ctx.strokeStyle = param.color;;
			ctx.shadowColor = param.blurColor;
			break;
		case 2:
			if(hue>255){param.TagNow*=-1;hue=255;}
			if(hue<0){param.TagNow*=-1;hue=0;}
			color = 'hsl('+hue+',90%,50%)';
			hue += param.TagNow/param.GradientRate;
			
			if(param.SolidColorGradient){
				ctx.strokeStyle = color;
			}else{
				ctx.strokeStyle = param.Color;
			}
			if(param.BlurColorGradient){
				ctx.shadowColor = color;
			}else{
				ctx.shadowColor = param.blurColor;
			}
			break;
		case 3:
			var ranX =  rainRad/3 * Math.cos(roh) + w;
			var ranY = rainRad/3 * Math.sin(roh) + h;
			roh = (roh+(Math.PI/ 300)) % (2 * Math.PI);
			circleX = w*param.cX;
			circleY = h*param.cY;
			rainbow = ctx.createRadialGradient(circleX, circleY, 0, ranX/2, ranY/2, w/3);

			
			if(param.ColorRhythm){
				//rainbow.addColorStop("0", getColor(10));
				rainbow.addColorStop(".1", getColor(10));
				rainbow.addColorStop(".2", getColor(9));
				rainbow.addColorStop(".3", getColor(8));
				rainbow.addColorStop(".4", getColor(7));
				rainbow.addColorStop(".5", getColor(6));
				rainbow.addColorStop(".6", getColor(5));
				rainbow.addColorStop(".7", getColor(4));
				rainbow.addColorStop(".8", getColor(3));
				rainbow.addColorStop(".9", getColor(2));
				rainbow.addColorStop("1.0", getColor(1));
			}else{
				rainbow.addColorStop("0", "magenta");
				rainbow.addColorStop(".25", "blue");
				rainbow.addColorStop(".50", "green");
				rainbow.addColorStop(".75", "yellow");
				rainbow.addColorStop("1.0", "red");
			}
			color = rainbow;
				//CTXLine.strokeStyle = PWLineParam.color;
			ctx.fillStyle = color;
			ctx.strokeStyle = color;
			ctx.shadowColor = param.blurColor;
			break;
	}
}


/* ??? */
function createPoint(arr){
    param.arr1 = [];
    param.arr2 = [];
    for(var i=0; i<120; i++){
        var deg
        if(param.showSemiCircle){
            switch (param.SemiCircledirection) {
                case 1://?
                    deg = Math.PI/120*(i+param.offsetAngle+0.5)*-1; //????
                    break;
                case 2://?
                    deg = Math.PI/120*(i+param.offsetAngle+0.5); //????
                    break;
                case 3://?
                    deg = Math.PI/120*(i+param.offsetAngle-179.5);//????
                    break;
                case 4://?
                    deg = Math.PI/120*(i+param.offsetAngle+180.5); //????
                    break;
            }
        }else{
            deg = Math.PI/param.PolygonAngle*(i+param.offsetAngle)*3; //????
        }
        var w1 = arr[i] ? arr[i] : 0;
        var w2;
        if(param.waveArr[i]){
            w2 = param.waveArr[i] - 0.1;
        }else{
            w2 = 0;
        }
        w1 = Math.max(w1, w2);
        param.waveArr[i] = w1 = Math.min(w1, 1.2);
        var w = w1*param.range*100;
        var offset1;
        var offset2;
        switch (param.direction) {
            case 1:
                offset1 = param.r*minW/2+w+1;
                offset2 = param.r*minW/2;
                break;
            case 2:
                offset1 = param.r*minW/2; // ????
                offset2 = param.r*minW/2-w-1; // ????
                break;
            case 3:
                offset1 = param.r*minW/2+w+1; // ????
                offset2 = param.r*minW/2-w-1; // ????
                break;
        }
        var p1 = getXY(offset1, deg);
        var p2 = getXY(offset2, deg);
        param.arr1.push({'x':p1.x, 'y':p1.y});
        param.arr2.push({'x':p2.x, 'y':p2.y});
    }
    if(param.rotation){
        param.offsetAngle += param.rotation/Polygon;
        if(param.offsetAngle>=360){
            param.offsetAngle = 0;
        }else if(param.offsetAngle<=0){
            param.offsetAngle = 360;
        }
    }
}
function getXY(offset, deg){
    return {'x':Math.cos(deg)*offset+param.cX*w, 'y':Math.sin(deg)*offset+param.cY*h};
}

/* ?? */
function style1(){
    // ?????
    ctx.beginPath();
    for(var i=0; i<120; i++){
        ctx.moveTo(param.arr1[i].x, param.arr1[i].y);
        ctx.lineTo(param.arr2[i].x, param.arr2[i].y);
    }
    ctx.closePath();
    ctx.stroke();
}
function style2(){
    // ??
    ctx.beginPath();
    ctx.moveTo(param.arr1[0].x, param.arr1[0].y);
    for(var i=0; i<120; i++){
        ctx.lineTo(param.arr1[i].x, param.arr1[i].y);
    }
    if(!param.showSemiCircle){
        ctx.closePath();
    }
    ctx.stroke();
    // ??
    ctx.beginPath();
    if(param.showSemiCircle){
        ctx.moveTo(param.arr2[0].x, param.arr2[0].y);
        for(var i=0; i<120; i++){
            ctx.lineTo(param.arr2[i].x, param.arr2[i].y);
        }
    }else{
        ctx.moveTo(param.arr2[0].x, param.arr2[0].y);
        for(var i=0; i<120; i++){
            ctx.lineTo(param.arr2[i].x, param.arr2[i].y);
        }
    }
    if(!param.showSemiCircle){
        ctx.closePath();
    }
    ctx.stroke();
    // ?????
    ctx.beginPath();
    for(var i=0; i<120; i++){
        ctx.moveTo(param.arr1[i].x, param.arr1[i].y);
        ctx.lineTo(param.arr2[i].x, param.arr2[i].y);
    }
    ctx.closePath();
    ctx.stroke();

}
function style3(){
    // ??
    ctx.beginPath();
    ctx.moveTo(param.arr1[0].x, param.arr1[0].y);
    for(var i=0; i<120; i++){
        ctx.lineTo(param.arr1[i].x, param.arr1[i].y);
    }
    if(!param.showSemiCircle){
        ctx.closePath();
    }
    ctx.stroke();
    // ??
    ctx.beginPath();
    if(param.showSemiCircle){
        ctx.moveTo(param.arr2[0].x, param.arr2[0].y);
        for(var i=0; i<120; i++){
            ctx.lineTo(param.arr2[i].x, param.arr2[i].y);
        }
    }else{
        ctx.moveTo(param.arr2[0].x, param.arr2[0].y);
        for(var i=0; i<120; i++){
            ctx.lineTo(param.arr2[i].x, param.arr2[i].y);
        }
    }
    if(!param.showSemiCircle){
        ctx.closePath();
    }
    ctx.stroke();
}

resize();
//function PWCInit(){
	//resize();
	//window.onresize = resize;
	//createPoint([]);
	//style1();	
//}
//PWCInit();

window.wallpaperRegisterAudioListener && window.wallpaperRegisterAudioListener(wallpaperAudioListener);

function wallpaperAudioListener(arr) {
    if (started == false) {
        for (var i = 0; i < 120; i++) {
            myheight[i] = 0;
        }
        started = true;
    }

    var max = 0;
    var data = [];
    for (var i = 0, j = 0; i < 120; i++) {
        if (i < 64) {
            data[i] = Math.pow(arr[i] + arr[i + 64], user.peak) / 2;
        }
        else {
            data[i] = Math.pow(arr[i] + arr[j], user.peak) / 2;
            j++;
        }
        if (i == 0) {
        }
        if (user.equalize) {
            data[i] /= pinknoise[i];
        }
        if (data[i] > max) {
            max = data[i];
        }
    }
    var newAudio = [];
    var average = 0;
    peakValue = peakValue * 0.98 + max * 0.02;
    for (i = 0; i < 120; i++) {
        data[i] /= peakValue;
        if (data[i] > 1.2) {
            data[i] = 1.2;
        }
        if (i == 0 || i == 119) {
            newAudio[i] = data[i];
        } else {
            newAudio[i] = (data[i - 1] * 2 + data[i] * 3 + data[i + 1] * 2) / 7;
        }
        average += newAudio[i];
    }
    average /= 120;
        for (var i = 0; i < 120; i++) {
        if (arr[i] > 0.0001){
            if (newAudio[i] > arr[i]) {
                bars[i] = myheight[i] + (newAudio[i] - myheight[i]) / 4;
                myheight[i] = bars[i];
            }
            else if (newAudio[i] < arr[i]) {
                bars[i] = myheight[i] - (myheight[i] - newAudio[i]) / 4;
                myheight[i] = bars[i];
            }
        }else{
                bars[i] = myheight[i] - myheight[i] / 4;
                myheight[i] = bars[i];
        }
        }
    param.rotation = average + (bars[0] * 5 + bars[1] * 4.5 + bars[2] * 4) / 4;
}

function draw() {
    window.requestAnimationFrame(draw);

    var now = performance.now() / 1000;
    var dt = Math.min(now - last, 1);
    last = now;

    fpsThreshold += dt;
    if (fpsThreshold < 1.0 / 60) {
        return;
    }
    fpsThreshold -= 1.0 / 60;

    wallpaper.audiovisualizer('clearCanvas');
    CTXLine.clearRect(0, 0, w, h);
    ctx.clearRect(0, 0, w, h);
    if (TimeColorRhythm) setTimeColor();

    switch (visual_audio_model) {
        case 1:
            setCan();
            createPoint(bars);
            if (param.showCircle) {
                switch (param.style) {
                    case 1:
                        style1();
                        break;
                    case 2:
                        style2();
                        break;
                    case 3:
                        style3();
                        break;
                }
            }
            break;
        case 2:
            setCTXLine();
            PWLineCreatePoint(bars);
            if (PWLineParam.showLine) {
                switch (PWLineParam.style) {
                    case 1:
                        PWLineStyle1();
                        break;
                    case 2:
                        PWLineStyle2();
                        break;
                    case 3:
                        PWLineStyle3();
                        break;
                }
            }
            break;
        case 3:
            wallpaper.audiovisualizer('drawCanvas', bars);
            break;
    }
    if (true) {
        for (var i = 0; i < 32; i++) {
            audioArrayPar[i] = Math.floor(bars[i * 4] * 100);
        }
    }
}

window.onload = function () {
    window.requestAnimationFrame(draw);
}

/*
function auto(){
 ctx.clearRect(0,0,w,h);
 createPoint(param.arr);
 style1();
 requestAnimFrame(auto);
 }
 auto();*/
